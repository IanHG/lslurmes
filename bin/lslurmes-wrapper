#!/bin/sh
_=[[
IFS=:
for D in ${PATH}; do
   for F in "${D}"/lua "${D}"/lua5* "${D}"/luajit*; do
      if [ -x "${F}" ]; then
         exec "${F}" "$0" "$@"
      fi
   done
done
Printf "%s: no Lua interpreter found\n" "${0##*/}" >&2
Exit 1
]]

-- Load filesystem
local lfs = require "lfs"

-- Load local packages
folder_of_this = arg[0]:match("(.-)[^\\/]+$") -- Get folder of executeable
if folder_of_this:sub(1,1) ~= "/" then
   folder_of_this = lfs.currentdir() .. "/" .. folder_of_this
end
package.path = folder_of_this .. '../?.lua;' .. package.path -- Set package path

--
local luautil = assert(require "lib.luautil")
local function dofile_into_environment(filename, env)
   function readall(file)
      local f = assert(io.open(file, "rb"))
      local content = f:read("*all")
      f:close()
      return content
   end

   setmetatable ( env, { __index = _G } )
   local status = nil
   local result = nil
   if luautil.version() == "Lua 5.1" then
      status, result = assert(pcall(setfenv(assert(loadfile(filename)), env)))
   else
      local content  = readall(filename)
      status, result = assert(pcall(load(content, nil, nil, env)))
   end
   setmetatable(env, nil)
   return result
end

-- Load actual script from libexec
local lslurmes_main = "lslurmes"
assert(loadfile(folder_of_this .. "../libexec/" .. lslurmes_main))()
local sname = arg[1]
local fname = string.gsub(arg[1], "-", "_")
local env   = {}
local file  = dofile_into_environment(folder_of_this .. "../libexec/" ..arg[1], env)

-- Clean argv by first shifting all args one position, then removing last element.
for i = 0, #arg - 1 do
   arg[i] = arg[i + 1]
end
local head = table.remove(arg, #arg)

-- Run main function loaded from libexec
main(sname, env[fname])

--[[
# vi:syntax=lua
--]]
