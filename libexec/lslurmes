-- Load globally installed packages
local argparse = assert(require "lib.argparse")

-- Load local packages
local exception   = assert(require "lib.exception")
local logging     = assert(require "lib.logging")
local logger      = logging.logger
local ansicolor   = assert(require "lib.ansicolor")
local batchwriter = assert(require "lib.batchwriter")
local symbtab     = assert(require "lib.symbtab")
local execcmd     = assert(require "lib.execcmd")

--- Main driver.
--
--
function main(sname, pack)
   local parser = argparse.create(sname)

   exception.try(function()
      -- Arg parser
      local bw     = batchwriter.create()

      local lslurmes_parser = argparse.create_lslurmes_parser(parser)
      local lslurmes_writer = batchwriter.create_lslurmes_writer(bw)
      
      -- Run pack
      pack(lslurmes_parser:get(), lslurmes_writer:get())
      
      -- Parse arguments
      local args = parser:parse()

      -- Setup symbol table
      symbtable = symbtab.create()
      for k,v in pairs(args) do
         symbtable:add_symbol(k, v)
      end

      for k, v in pairs(args.precmd) do
         bw:add_command(v, "pre")
      end
      
      for k, v in pairs(args.postcmd) do
         bw:add_command(v, "post")
      end

      -- Write batchfile
      local file = {file = ""}
      bw:write(symbtable, file)
      
      -- If not dry-run we submit
      if args.dry then
         execcmd.execcmd({[0] = "cat"},    io.stdout, file.file)
      else
         execcmd.execcmd({[0] = "sbatch"}, io.stdout, file.file)
      end

      -- Dump file if requested
      if args.dump_file then
         local filefd = io.open(args.file_name, "w")
         filefd:write(file.file)
         filefd:close()
      end
   end, function(e)
      -- Print exception
      exception.message(e)
         
      -- Print usage
      print("\n" .. parser:get_usage())

      -- Exit with non zero status
      os.exit(1)
   end)
end

--[[
# vi:syntax=lua
--]]
